To run the mongo docker image
sudo docker run -d -p 2717:27017 -v ~/mongodb-docker:/data/db --name mymongo mongo:latest

If contatiner is not able to start again
sudo docker rm mymongo
Run it again

To open the mongo shell
sudo docker exec -it mymongo mongosh

To always restart the container on boot up.
Make sure the docker is in enabled state by running >sudo systemctl enable docker 
sudo docker update --restart=always mymongo

-----------------

Current Implementation for game party: 
User can invite only his firends to the game party.
Future work: User can choose to invite friends for private sessions or open the invitation to the public for more social interaction.
This can be achieved by providing settings that allow users to switch between modes depending on their preference for each game party.

When player is online but not in any game party, player status: "idle" else "in-game".

Create a user-login endpoint. This will update the status to "idle".
Whenver a user logs-in, broadcast a real time message to all his friends with his online status

----------------------
For protocol buffers

1. apt install -y protobuf-compiler
// protoc --version

// copy protoc file to /usr/local/go/bin/
2. sudo cp /usr/bin/protoc /usr/local/go/bin/


3. get below packages: 
    a. go get google.golang.org/protobuf
    b. go get google.golang.org/protobuf/proto
    c. go get google.golang.org/grpc

3. Install the below packages. Will be installed in $GoBIN -> defaulting to $GOPATH/bin = ~/go/bin
    i. go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
    ii. go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2

// add the above path
4. export PATH="$PATH:$(go env GOPATH)/bin"

5. generate go code for the proto file
    protoc --go_out=. --go-grpc_out=. ./game.proto

-----------

Future Work For MongoDB, 
1. user better practice to store and retrieve password
2. create indexes on fields that are read frequently
3. For gameparty collection, create a Cron job to move all records having game party status as 'over' and time since created greater than 1 month to a backup collection 'gamepartyover' for faster mongo read operations on 'getparty' collection 

-----------------
Real time services
1. notify the user whenever a player joins the party
    - 1st invoke the gRPC call "StreamPlayerJoinedStatus" from Postman
    - Then, join the game party

2. notify the user whenever his friend comes online

ToDo: have multiple instances

-----------

Things installed for the project
docker io/compose
golang
protoc (gRPC)

----------
To run a docker container
sudo docker run -d -p 2717:27017 -v ~/mongodb-docker:/data/db --name mymongo mongo:latest

To open mongo shell inside the docker container
sudo docker exec -it mymongo mongosh

------

// build the docker image
sudo docker build -t mycode:1.0 .

// To run the docker container from given image 
sudo docker run --network host -d --name myserver mycode:1.0 

// currently the connection to ports is not happening w/o --network as host
// figure out solution for it like creating a custome network, etc

In custom network
1. run the mongo container
2. run you docker container

now they should be able to communicate with each other

---------------------

docker-compose // to be in same directory as Dockerfile and to be run from there itself

// to start and run the containers
sudo docker-compose up -d --build // build tag not be used everytime

// if no changes in docker-compose file, run

sudo docker-compose up -d 

// top end services in docker compose
sudo docker-compose down 

// to see running docker compose status
sudo docker-compose ps

// to see logs for your project server
sudo docker logs lite-social-presence-system_myproject_1 -f

----------
ISSUE:
somehow in docker-compose, not able to bind host's 2717 with container port 27017.

--------
"127.0.0.1:8081" for running local server. Not with docker compose.
For any other networks, use "0.0.0.1" instead of "127.0.0.1"

-------------

Add your local user to docker group so that your local user run docker commands without sudo.
// very imp, else you will not be able to start minikube with driver as docker
$ sudo usermod -aG docker $USER
$ newgrp docker

Kubernetes

1. download minikube
$ sudo apt update
$ sudo apt upgrade -y
$ sudo reboot

// make sure docker is installed. we need to star minikube with driver as docker

// download minikube into ~/Downloads
wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

cp ./Downloads/minikube-linux-amd64 /usr/local/bin/minikube

// give executable permission to user
sudo chmod 755 /usr/local/bin/minikube

// verify
minikube version

2. download kubectl

curl': curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl

move it to /usr/local/bin/

// give executable permission to kubectl
sudo chmod 755 /usr/local/bin/kubectl

---------------------

To deploy on minikube

Create deployment file
Create service file

start the minikube: minikube start --driver=docker

apply the deployment using: kubectl apply -f deployment.yaml

apply the service using: kubectl apply -f service.yaml

---------------
kubectl get nodes

kubectl get pods

minikube service my-app-service

kubectl describe deployment my-app